# -*- mode:org; mode:visual-line; coding:utf-8; -*-

*** Nanocall: An Oxford Nanopore Basecaller

**** Installation

Nanocall uses =cmake= for configuration and =make= for building. It does not currently provide an installation option. The prerequisites needed for building are =zlib= and =hdf5=. On UNIX systems, =hdf5= can be optionally built as a submodule.

Example build:

#+BEGIN_EXAMPLE
mkdir /some/dir && cd /some/dir
git clone --recursive https://github.com/jts/nanocall.git
cd nanocall
mkdir build && cd build
cmake ../src [-DCMAKE_BUILD_TYPE=[Debug|Test|Release]] [-DBUILD_HDF5=1] [-DHDF5_ROOT=/path/to/hdf5]
make
/some/dir/nanocall/build/nanocall/nanocall --version
#+END_EXAMPLE

*NOTES*:

- The build type defaults to =Release=.

- Setting =BUILD_HDF5= will cause =hdf5= to be downloaded and build as a submodule.

- Setting =HDF5_ROOT= is necessary if a copy of =hdf5= is installed in a non-standard location. This is not needed when =BUILD_HDF5= is used.

**** Sample usage

#+BEGIN_EXAMPLE
FAST5_FILE=$SIMPSONLAB/data/nanopore/ecoli/sqk006/pass/LomanLabz_PC_Ecoli_K12_MG1655_20150924_MAP006_1_5005_1_ch9_file72_strand.fast5
nanocall ${FAST5_FILE} > ${FAST5_FILE}.fa
compute-state-transitions -p .001 -t .1 -k .1 >transitions.tsv
compute-scaled-pore-model -f $FAST5_FILE >model.tsv
get_events $FAST5_FILE | egrep -v '^(#|mean)' | tawk '{print $1,$3,$2,$4}' >events.tsv
run-viterbi -d info -p model.tsv -s transitions.tsv -e events.tsv | { echo ">$(basename $FAST5_FILE)"; cat; } >out.fa
run-viterbi -d debug -p model.tsv -s transitions.tsv -e <(awk 'NR>=100 && NR<200' events.tsv) |& tee log
run-fwbw -d info -p model.tsv -s transitions.tsv -e <(awk 'NR>=100 && NR<200' events.tsv) -o fwbw.tsv
#+END_EXAMPLE

**** Windows Build

There are two options for running Nanocall on Windows: build the project from the source code, or use the included executable.

***** Using the executable

The following must be installed before running the executable.

1. [[https://www.microsoft.com/en-us/download/details.aspx?id=48145][Visual C++ Redistributable for Visual Studio 2015]]. Download and run vc_redist.x86.exe

2. [[http://www.hdfgroup.org/ftp/HDF5/current/bin/windows/extra/hdf5-1.8.16-win32-vs2015-shared.zip][HDF5 for Windows (32-bit) using VS 2015]]. Download and run the Windows Installer. Make sure to *restart your computer* after this step.

That's it! The executable can be found here (TODO: provide link).

***** Building from source code

Nanocall can be built from source code if you have CMake and Visual Studio 2015 installed.

1. Windows installers for the latest version of CMake can be found [[https://cmake.org/download/][here]].

2. Visual Studio can be found [[https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx][here]]. Make sure to *install C++* by choosing =Custom > Programming Languages > C++=. This is not selected by default.

3. (Same as Step 2 from above) [[http://www.hdfgroup.org/ftp/HDF5/current/bin/windows/extra/hdf5-1.8.16-win32-vs2015-shared.zip][HDF5 for Windows (32-bit) using VS 2015]]. Download and run the Windows Installer. Make sure to *restart your computer* after this step.

4. Run =win32-build.bat=

5. The executable will be generated in =build/nanocall/Release=
