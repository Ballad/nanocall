# -*- mode:org; mode:visual-line; coding:utf-8; -*-

*** Nanocall: An Oxford Nanopore Basecaller

**** Installation

Nanocall uses =cmake= for configuration and =make= for building. It does not currently provide an installation option. The prerequisites needed for building are =zlib= and =hdf5=. On UNIX systems, =hdf5= can be optionally built as a submodule.

Example build:

#+BEGIN_EXAMPLE
mkdir /some/dir && cd /some/dir
git clone https://github.com/jts/nanocall.git
cd nanocall
mkdir build && cd build
cmake ../src [-DCMAKE_BUILD_TYPE=[Debug|Test|Release]] [-DBUILD_HDF5=1] [-DHDF5_ROOT=/path/to/hdf5]
make
/some/dir/nanocall/build/nanocall/nanocall --version
#+END_EXAMPLE

*NOTES*:

- The build type defaults to =Release=.

- Setting =BUILD_HDF5= will cause =hdf5= to be downloaded and build as a submodule.

- Setting =HDF5_ROOT= is necessary if a copy of =hdf5= is installed in a non-standard location. This is not needed when =BUILD_HDF5= is used.

**** Sample usage

#+BEGIN_EXAMPLE
FAST5_FILE=$SIMPSONLAB/data/nanopore/ecoli/sqk006/pass/LomanLabz_PC_Ecoli_K12_MG1655_20150924_MAP006_1_5005_1_ch9_file72_strand.fast5
nanocall ${FAST5_FILE} > ${FAST5_FILE}.fa
compute-state-transitions -p .001 -t .1 -k .1 >transitions.tsv
compute-scaled-pore-model -f $FAST5_FILE >model.tsv
get_events $FAST5_FILE | egrep -v '^(#|mean)' | tawk '{print $1,$3,$2,$4}' >events.tsv
run-viterbi -d info -p model.tsv -s transitions.tsv -e events.tsv | { echo ">$(basename $FAST5_FILE)"; cat; } >out.fa
run-viterbi -d debug -p model.tsv -s transitions.tsv -e <(awk 'NR>=100 && NR<200' events.tsv) |& tee log
run-fwbw -d info -p model.tsv -s transitions.tsv -e <(awk 'NR>=100 && NR<200' events.tsv) -o fwbw.tsv
#+END_EXAMPLE
