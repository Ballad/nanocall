#!/usr/bin/env python3

import argparse
import os
import re
import sys

description = '''
  Transform the given model files into C++ initializer list suitable for inclusion during preprocessing.
'''
default_files = [
    '0:r73.t.006.ont.model',
    '1:r73.c.p1.006.ont.model',
    '1:r73.c.p2.006.ont.model',
    '0:r9.t.006.ont.model',
    '1:r9.c.p1.006.ont.model',
    '1:r9.c.p2.006.ont.model']
parser = argparse.ArgumentParser(description=description, epilog='')
parser.add_argument('input', nargs='*', default=default_files, help='Input models, in the form <strand>:<file>')
args = parser.parse_args()

m_strands = list()
m_names = list()

for fn in args.input:
    if fn[0] not in '012' or fn[1] != ':':
        print('error parsing model name [' + fn + ']: expecting <strand>:<file>', file=sys.stderr)
        sys.exit(1)
    m_strands.append(int(fn[0]))
    m_names.append(fn[2:])

f_out = open('builtin_model_num.inl', 'w')
print(str(len(m_names)), file=f_out)
f_out.close()

f_out = open('builtin_model_names.inl', 'w')
print('{', file=f_out)
for i in range(len(m_names)):
    if i > 0:
        print('  ,', file=f_out)
    print('  "' + m_names[i] + '"', file=f_out)
print('}', file=f_out)
f_out.close()

f_out = open('builtin_model_strands.inl', 'w')
print('{', file=f_out)
for i in range(len(m_strands)):
    if i > 0:
        print('  ,', file=f_out)
    print('  ' + str(m_strands[i]), file=f_out)
print('}', file=f_out)
f_out.close()

f_out = open('builtin_model_init_lists.inl', 'w')
print('{', file=f_out)
for i in range(len(m_names)):
    if i > 0:
        print('  ,', file=f_out)
    print('  {', file=f_out)
    f = open(m_names[i])
    first_line = True
    for line in f:
        l = line.strip().split()
        if len(l) < 5 or re.search(r'[^ACGT]', l[0].upper()) != None:
            continue
        if not first_line:
            print('    ,', file=f_out)
        first_line = False
        print('    ' + ', '.join(l[1:5]), file=f_out)
    print('  }', file=f_out)
print('}', file=f_out)
f_out.close()

